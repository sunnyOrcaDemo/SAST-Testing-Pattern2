import logging

from os import path
from pathlib import Path

from pattern_repair.README_markdown_elements import *
from pattern_repair.utils import (
    read_json,
    read_csv_to_dict,
    read_file,
    translate_bool,
    get_instance_name,
)
from pattern_repair.README_instance_generator import InstanceREADMEGenerator

from core.utils import check_lang_tp_lib_path, get_id_from_name
from core import loggermgr

logger = logging.getLogger(loggermgr.logger_name(__name__))


class READMEGenerator:
    def __init__(
        self,
        path_to_pattern: str,
        language: str,
        tp_lib_path: str,
        instance_jsons: list[str],
        discovery_rule_results: str = None,
        measurement_results: str = None,
        masking_file: str = "",
    ) -> None:
        check_lang_tp_lib_path(Path(path.join(tp_lib_path, language.upper())))

        self.pattern_path = path_to_pattern
        self.pattern_dict = read_json(
            path.join(path_to_pattern, f"{path.basename(path_to_pattern)}.json")
        )
        self.language = language.upper()
        self.log_prefix = "Generating README: "
        self.discovery_rule_results = None
        self.measurement_results = measurement_results
        self.masking_file = masking_file
        self.instance_jsons = instance_jsons

        if not path.isfile(discovery_rule_results):
            logger.warning(
                f"{self.log_prefix}Cannot locate discoveryrule results in {self.discovery_rule_results}"
            )
        else:
            self.discovery_rule_results = read_csv_to_dict(discovery_rule_results)

        self.readme_structure = [
            self._comment,
            self._heading,
            self._tags,
            self._pattern_description,
            self._pattern_metadata,
            self._instances,
        ]

    def _comment(self) -> list:
        """Generates a Comment for the top of the README file."""
        return [
            MarkdownComment(
                "This file is automatically generated. If you wish to make any changes, please use the JSON files and regenerate this file using the tpframework."
            )
        ]

    def _heading(self) -> list:
        """Generates the heading for the README file."""
        return [MarkdownHeading(self.pattern_dict["name"], 1)]

    def _pattern_description(self) -> list:
        """Generates the description for the pattern."""
        desc = self.pattern_dict["description"]
        if path.isfile(path.join(self.pattern_path, desc)):
            desc = read_file(path.join(self.pattern_path, desc))
        return [MarkdownHeading("Description", 2), MarkdownString(desc)]

    def _tags(self) -> list:
        """Generates pattern tags."""
        return [
            MarkdownString(f'Tags: {", ".join(self.pattern_dict["tags"])}'),
            MarkdownString(f'Version: {self.pattern_dict["version"]}'),
        ]

    def _pattern_metadata(self) -> list:
        """Generates a table of pattern metadata, such as the instances, discovery rule discovery method and if the discovery rule is successfull on the instance."""
        discovery_rule_exists = []
        instance_names = []
        discovery_rule_successfull = []
        discovery_method = []
        for instance_path_json in self.instance_jsons:
            instance_dict = read_json(instance_path_json)
            instance_path = path.dirname(instance_path_json)

            instance_name = get_instance_name(path.basename(instance_path))
            instance_names += [
                MarkdownLink(instance_name, MarkdownHeading(instance_name, 2))
            ]

            discovery_file = path.join(
                instance_path, instance_dict["discovery"]["rule"]
            )
            discovery_rule_exists += [translate_bool(path.isfile(discovery_file))]

            pattern_id, instance_id = get_id_from_name(
                path.basename(self.pattern_path)
            ), get_id_from_name(path.basename(instance_path))
            discovery_rule_successfull += (
                [
                    self.discovery_rule_results[self.language][str(pattern_id)][
                        str(instance_id)
                    ]
                ]
                if self.discovery_rule_results
                else [""]
            )
            if not self.discovery_rule_results:
                logger.warning(
                    f"{self.log_prefix}Could not find discovery rule result for {instance_name}."
                )
            if not discovery_rule_successfull[-1]:
                logger.warning(
                    f'{self.log_prefix}Could not find discovery rule result for {instance_name}. Assuming "error"'
                )
                discovery_rule_successfull[-1] = "error"

            discovery_method += [instance_dict["discovery"]["method"]]

        metadata_dict = {
            "0::Instances": instance_names,
            "1::has discovery rule": discovery_rule_exists,
            "2::discovery method": discovery_method,
            "3::rule successfull": discovery_rule_successfull,
        }

        return [MarkdownHeading("Overview", 2), MarkdownTable(metadata_dict)]

    def _instances(self) -> list:
        """Generates the README elements for all instances."""
        return InstanceREADMEGenerator(
            self.pattern_path,
            self.language,
            self.measurement_results,
            self.instance_jsons,
            masking_file=self.masking_file,
        ).generate_md()

    def generate_README(self) -> str:
        """Entrypoint for generating a README file for that pattern.

        Returns:
            str: The generated README file following `self.readme_structure`
        """
        md_elements = []
        for f in self.readme_structure:
            md_elements += f()
        final_md = MarkdownDocument(md_elements).to_markdown()
        return final_md
